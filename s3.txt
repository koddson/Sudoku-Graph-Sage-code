# General code for working with S3.

# This section is to generate the adjacencies for S3, outputted in a file named “s3canadj.txt”;
# Our vertex names and adjacencies are based on the canonical labeling of B3,
# where the cells are labeled (i,j), 1 <= i,j <= n^2, 
# where i is the row number (top to bottom) and j is the column number (left to right).

o=open('./s3canadj.txt','w')
o.write(str('S3=Graph({'))
o.write(str('\n'))
n = 3								
i = range(1, n^2 + 1)
V = list(cartesian_product([i,i]))	
for k in range(len(V) - 1):			
	u = V[k]							
	X = []							
	for m in range(k+1, len(V)):		
		v = V[m]						
		if u[0] == v[0] or u[1] == v[1] or ceil(u[0]/n) == ceil(v[0]/n) and ceil(u[1]/n) == ceil(v[1]/n): 
			X.append(v)				
	o.write(str(u))
	o.write(str(':'))
	o.write(str(X))					
	o.write(str(',\n'))
o.write(str('})'))
o.close

# Open the file “s3canadj.txt” 
# Copy and past the contents of this file to your working S3 file. We have done so below:

S3=Graph({
(1, 1):[(1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), (2, 1), (2, 2), (2, 3), (3, 1), (3, 2), (3, 3), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1)],
(1, 2):[(1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), (2, 1), (2, 2), (2, 3), (3, 1), (3, 2), (3, 3), (4, 2), (5, 2), (6, 2), (7, 2), (8, 2), (9, 2)],
(1, 3):[(1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), (2, 1), (2, 2), (2, 3), (3, 1), (3, 2), (3, 3), (4, 3), (5, 3), (6, 3), (7, 3), (8, 3), (9, 3)],
(1, 4):[(1, 5), (1, 6), (1, 7), (1, 8), (1, 9), (2, 4), (2, 5), (2, 6), (3, 4), (3, 5), (3, 6), (4, 4), (5, 4), (6, 4), (7, 4), (8, 4), (9, 4)],
(1, 5):[(1, 6), (1, 7), (1, 8), (1, 9), (2, 4), (2, 5), (2, 6), (3, 4), (3, 5), (3, 6), (4, 5), (5, 5), (6, 5), (7, 5), (8, 5), (9, 5)],
(1, 6):[(1, 7), (1, 8), (1, 9), (2, 4), (2, 5), (2, 6), (3, 4), (3, 5), (3, 6), (4, 6), (5, 6), (6, 6), (7, 6), (8, 6), (9, 6)],
(1, 7):[(1, 8), (1, 9), (2, 7), (2, 8), (2, 9), (3, 7), (3, 8), (3, 9), (4, 7), (5, 7), (6, 7), (7, 7), (8, 7), (9, 7)],
(1, 8):[(1, 9), (2, 7), (2, 8), (2, 9), (3, 7), (3, 8), (3, 9), (4, 8), (5, 8), (6, 8), (7, 8), (8, 8), (9, 8)],
(1, 9):[(2, 7), (2, 8), (2, 9), (3, 7), (3, 8), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9), (9, 9)],
(2, 1):[(2, 2), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8), (2, 9), (3, 1), (3, 2), (3, 3), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1)],
(2, 2):[(2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8), (2, 9), (3, 1), (3, 2), (3, 3), (4, 2), (5, 2), (6, 2), (7, 2), (8, 2), (9, 2)],
(2, 3):[(2, 4), (2, 5), (2, 6), (2, 7), (2, 8), (2, 9), (3, 1), (3, 2), (3, 3), (4, 3), (5, 3), (6, 3), (7, 3), (8, 3), (9, 3)],
(2, 4):[(2, 5), (2, 6), (2, 7), (2, 8), (2, 9), (3, 4), (3, 5), (3, 6), (4, 4), (5, 4), (6, 4), (7, 4), (8, 4), (9, 4)],
(2, 5):[(2, 6), (2, 7), (2, 8), (2, 9), (3, 4), (3, 5), (3, 6), (4, 5), (5, 5), (6, 5), (7, 5), (8, 5), (9, 5)],
(2, 6):[(2, 7), (2, 8), (2, 9), (3, 4), (3, 5), (3, 6), (4, 6), (5, 6), (6, 6), (7, 6), (8, 6), (9, 6)],
(2, 7):[(2, 8), (2, 9), (3, 7), (3, 8), (3, 9), (4, 7), (5, 7), (6, 7), (7, 7), (8, 7), (9, 7)],
(2, 8):[(2, 9), (3, 7), (3, 8), (3, 9), (4, 8), (5, 8), (6, 8), (7, 8), (8, 8), (9, 8)],
(2, 9):[(3, 7), (3, 8), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9), (9, 9)],
(3, 1):[(3, 2), (3, 3), (3, 4), (3, 5), (3, 6), (3, 7), (3, 8), (3, 9), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1)],
(3, 2):[(3, 3), (3, 4), (3, 5), (3, 6), (3, 7), (3, 8), (3, 9), (4, 2), (5, 2), (6, 2), (7, 2), (8, 2), (9, 2)],
(3, 3):[(3, 4), (3, 5), (3, 6), (3, 7), (3, 8), (3, 9), (4, 3), (5, 3), (6, 3), (7, 3), (8, 3), (9, 3)],
(3, 4):[(3, 5), (3, 6), (3, 7), (3, 8), (3, 9), (4, 4), (5, 4), (6, 4), (7, 4), (8, 4), (9, 4)],
(3, 5):[(3, 6), (3, 7), (3, 8), (3, 9), (4, 5), (5, 5), (6, 5), (7, 5), (8, 5), (9, 5)],
(3, 6):[(3, 7), (3, 8), (3, 9), (4, 6), (5, 6), (6, 6), (7, 6), (8, 6), (9, 6)],
(3, 7):[(3, 8), (3, 9), (4, 7), (5, 7), (6, 7), (7, 7), (8, 7), (9, 7)],
(3, 8):[(3, 9), (4, 8), (5, 8), (6, 8), (7, 8), (8, 8), (9, 8)],
(3, 9):[(4, 9), (5, 9), (6, 9), (7, 9), (8, 9), (9, 9)],
(4, 1):[(4, 2), (4, 3), (4, 4), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (5, 1), (5, 2), (5, 3), (6, 1), (6, 2), (6, 3), (7, 1), (8, 1), (9, 1)],
(4, 2):[(4, 3), (4, 4), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (5, 1), (5, 2), (5, 3), (6, 1), (6, 2), (6, 3), (7, 2), (8, 2), (9, 2)],
(4, 3):[(4, 4), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (5, 1), (5, 2), (5, 3), (6, 1), (6, 2), (6, 3), (7, 3), (8, 3), (9, 3)],
(4, 4):[(4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (5, 4), (5, 5), (5, 6), (6, 4), (6, 5), (6, 6), (7, 4), (8, 4), (9, 4)],
(4, 5):[(4, 6), (4, 7), (4, 8), (4, 9), (5, 4), (5, 5), (5, 6), (6, 4), (6, 5), (6, 6), (7, 5), (8, 5), (9, 5)],
(4, 6):[(4, 7), (4, 8), (4, 9), (5, 4), (5, 5), (5, 6), (6, 4), (6, 5), (6, 6), (7, 6), (8, 6), (9, 6)],
(4, 7):[(4, 8), (4, 9), (5, 7), (5, 8), (5, 9), (6, 7), (6, 8), (6, 9), (7, 7), (8, 7), (9, 7)],
(4, 8):[(4, 9), (5, 7), (5, 8), (5, 9), (6, 7), (6, 8), (6, 9), (7, 8), (8, 8), (9, 8)],
(4, 9):[(5, 7), (5, 8), (5, 9), (6, 7), (6, 8), (6, 9), (7, 9), (8, 9), (9, 9)],
(5, 1):[(5, 2), (5, 3), (5, 4), (5, 5), (5, 6), (5, 7), (5, 8), (5, 9), (6, 1), (6, 2), (6, 3), (7, 1), (8, 1), (9, 1)],
(5, 2):[(5, 3), (5, 4), (5, 5), (5, 6), (5, 7), (5, 8), (5, 9), (6, 1), (6, 2), (6, 3), (7, 2), (8, 2), (9, 2)],
(5, 3):[(5, 4), (5, 5), (5, 6), (5, 7), (5, 8), (5, 9), (6, 1), (6, 2), (6, 3), (7, 3), (8, 3), (9, 3)],
(5, 4):[(5, 5), (5, 6), (5, 7), (5, 8), (5, 9), (6, 4), (6, 5), (6, 6), (7, 4), (8, 4), (9, 4)],
(5, 5):[(5, 6), (5, 7), (5, 8), (5, 9), (6, 4), (6, 5), (6, 6), (7, 5), (8, 5), (9, 5)],
(5, 6):[(5, 7), (5, 8), (5, 9), (6, 4), (6, 5), (6, 6), (7, 6), (8, 6), (9, 6)],
(5, 7):[(5, 8), (5, 9), (6, 7), (6, 8), (6, 9), (7, 7), (8, 7), (9, 7)],
(5, 8):[(5, 9), (6, 7), (6, 8), (6, 9), (7, 8), (8, 8), (9, 8)],
(5, 9):[(6, 7), (6, 8), (6, 9), (7, 9), (8, 9), (9, 9)],
(6, 1):[(6, 2), (6, 3), (6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (7, 1), (8, 1), (9, 1)],
(6, 2):[(6, 3), (6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (7, 2), (8, 2), (9, 2)],
(6, 3):[(6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (7, 3), (8, 3), (9, 3)],
(6, 4):[(6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (7, 4), (8, 4), (9, 4)],
(6, 5):[(6, 6), (6, 7), (6, 8), (6, 9), (7, 5), (8, 5), (9, 5)],
(6, 6):[(6, 7), (6, 8), (6, 9), (7, 6), (8, 6), (9, 6)],
(6, 7):[(6, 8), (6, 9), (7, 7), (8, 7), (9, 7)],
(6, 8):[(6, 9), (7, 8), (8, 8), (9, 8)],
(6, 9):[(7, 9), (8, 9), (9, 9)],
(7, 1):[(7, 2), (7, 3), (7, 4), (7, 5), (7, 6), (7, 7), (7, 8), (7, 9), (8, 1), (8, 2), (8, 3), (9, 1), (9, 2), (9, 3)],
(7, 2):[(7, 3), (7, 4), (7, 5), (7, 6), (7, 7), (7, 8), (7, 9), (8, 1), (8, 2), (8, 3), (9, 1), (9, 2), (9, 3)],
(7, 3):[(7, 4), (7, 5), (7, 6), (7, 7), (7, 8), (7, 9), (8, 1), (8, 2), (8, 3), (9, 1), (9, 2), (9, 3)],
(7, 4):[(7, 5), (7, 6), (7, 7), (7, 8), (7, 9), (8, 4), (8, 5), (8, 6), (9, 4), (9, 5), (9, 6)],
(7, 5):[(7, 6), (7, 7), (7, 8), (7, 9), (8, 4), (8, 5), (8, 6), (9, 4), (9, 5), (9, 6)],
(7, 6):[(7, 7), (7, 8), (7, 9), (8, 4), (8, 5), (8, 6), (9, 4), (9, 5), (9, 6)],
(7, 7):[(7, 8), (7, 9), (8, 7), (8, 8), (8, 9), (9, 7), (9, 8), (9, 9)],
(7, 8):[(7, 9), (8, 7), (8, 8), (8, 9), (9, 7), (9, 8), (9, 9)],
(7, 9):[(8, 7), (8, 8), (8, 9), (9, 7), (9, 8), (9, 9)],
(8, 1):[(8, 2), (8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8), (8, 9), (9, 1), (9, 2), (9, 3)],
(8, 2):[(8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8), (8, 9), (9, 1), (9, 2), (9, 3)],
(8, 3):[(8, 4), (8, 5), (8, 6), (8, 7), (8, 8), (8, 9), (9, 1), (9, 2), (9, 3)],
(8, 4):[(8, 5), (8, 6), (8, 7), (8, 8), (8, 9), (9, 4), (9, 5), (9, 6)],
(8, 5):[(8, 6), (8, 7), (8, 8), (8, 9), (9, 4), (9, 5), (9, 6)],
(8, 6):[(8, 7), (8, 8), (8, 9), (9, 4), (9, 5), (9, 6)],
(8, 7):[(8, 8), (8, 9), (9, 7), (9, 8), (9, 9)],
(8, 8):[(8, 9), (9, 7), (9, 8), (9, 9)],
(8, 9):[(9, 7), (9, 8), (9, 9)],
(9, 1):[(9, 2), (9, 3), (9, 4), (9, 5), (9, 6), (9, 7), (9, 8), (9, 9)],
(9, 2):[(9, 3), (9, 4), (9, 5), (9, 6), (9, 7), (9, 8), (9, 9)],
(9, 3):[(9, 4), (9, 5), (9, 6), (9, 7), (9, 8), (9, 9)],
(9, 4):[(9, 5), (9, 6), (9, 7), (9, 8), (9, 9)],
(9, 5):[(9, 6), (9, 7), (9, 8), (9, 9)],
(9, 6):[(9, 7), (9, 8), (9, 9)],
(9, 7):[(9, 8), (9, 9)],
(9, 8):[(9, 9)],
})

# This section is to generate the adjacencies for S3, outputted in a file named “s3adj.txt”. 
# Our vertex names (and adjacencies) are based on labeling the sudoku board; 
# the top row is filled in, left to right, with 1, 2, …, n^2, in order. 
# The next row receives n^2+1, n^2+2, …, 2n^2; the bottom right cell of the board receives n^4.

o=open('./s3adj.txt','w')
o.write(str('S3=Graph({'))
o.write(str('\n'))
n = 3
i = range(1, n^2 + 1)
V = list(cartesian_product([i,i]))
for k in range(len(V) - 1):
        u = list(V[k])
        X = []
        for m in range(k + 1, len(V)):
                v = list(V[m])
                if u[0] == v[0] or u[1] == v[1] or ceil(u[0]/n) == ceil(v[0]/n) and ceil(u[1]/n) == ceil(v[1]/n):
                        X.append((v[0] - 1)*n^2 + v[1])
        f = (u[0] - 1)*n^2 + u[1]
        o.write(str(f))
        o.write(str(':'))
        o.write(str(X))
        o.write(str(',\n'))
o.write(str('})'))
o.close

# Open the file “s3adj.txt”
# Copy and past the contents of this file to your working S3 file. We have done so below:

S3=Graph({
1:[2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 19, 20, 21, 28, 37, 46, 55, 64, 73],
2:[3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 19, 20, 21, 29, 38, 47, 56, 65, 74],
3:[4, 5, 6, 7, 8, 9, 10, 11, 12, 19, 20, 21, 30, 39, 48, 57, 66, 75],
4:[5, 6, 7, 8, 9, 13, 14, 15, 22, 23, 24, 31, 40, 49, 58, 67, 76],
5:[6, 7, 8, 9, 13, 14, 15, 22, 23, 24, 32, 41, 50, 59, 68, 77],
6:[7, 8, 9, 13, 14, 15, 22, 23, 24, 33, 42, 51, 60, 69, 78],
7:[8, 9, 16, 17, 18, 25, 26, 27, 34, 43, 52, 61, 70, 79],
8:[9, 16, 17, 18, 25, 26, 27, 35, 44, 53, 62, 71, 80],
9:[16, 17, 18, 25, 26, 27, 36, 45, 54, 63, 72, 81],
10:[11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 28, 37, 46, 55, 64, 73],
11:[12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 29, 38, 47, 56, 65, 74],
12:[13, 14, 15, 16, 17, 18, 19, 20, 21, 30, 39, 48, 57, 66, 75],
13:[14, 15, 16, 17, 18, 22, 23, 24, 31, 40, 49, 58, 67, 76],
14:[15, 16, 17, 18, 22, 23, 24, 32, 41, 50, 59, 68, 77],
15:[16, 17, 18, 22, 23, 24, 33, 42, 51, 60, 69, 78],
16:[17, 18, 25, 26, 27, 34, 43, 52, 61, 70, 79],
17:[18, 25, 26, 27, 35, 44, 53, 62, 71, 80],
18:[25, 26, 27, 36, 45, 54, 63, 72, 81],
19:[20, 21, 22, 23, 24, 25, 26, 27, 28, 37, 46, 55, 64, 73],
20:[21, 22, 23, 24, 25, 26, 27, 29, 38, 47, 56, 65, 74],
21:[22, 23, 24, 25, 26, 27, 30, 39, 48, 57, 66, 75],
22:[23, 24, 25, 26, 27, 31, 40, 49, 58, 67, 76],
23:[24, 25, 26, 27, 32, 41, 50, 59, 68, 77],
24:[25, 26, 27, 33, 42, 51, 60, 69, 78],
25:[26, 27, 34, 43, 52, 61, 70, 79],
26:[27, 35, 44, 53, 62, 71, 80],
27:[36, 45, 54, 63, 72, 81],
28:[29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 46, 47, 48, 55, 64, 73],
29:[30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 46, 47, 48, 56, 65, 74],
30:[31, 32, 33, 34, 35, 36, 37, 38, 39, 46, 47, 48, 57, 66, 75],
31:[32, 33, 34, 35, 36, 40, 41, 42, 49, 50, 51, 58, 67, 76],
32:[33, 34, 35, 36, 40, 41, 42, 49, 50, 51, 59, 68, 77],
33:[34, 35, 36, 40, 41, 42, 49, 50, 51, 60, 69, 78],
34:[35, 36, 43, 44, 45, 52, 53, 54, 61, 70, 79],
35:[36, 43, 44, 45, 52, 53, 54, 62, 71, 80],
36:[43, 44, 45, 52, 53, 54, 63, 72, 81],
37:[38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 55, 64, 73],
38:[39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 56, 65, 74],
39:[40, 41, 42, 43, 44, 45, 46, 47, 48, 57, 66, 75],
40:[41, 42, 43, 44, 45, 49, 50, 51, 58, 67, 76],
41:[42, 43, 44, 45, 49, 50, 51, 59, 68, 77],
42:[43, 44, 45, 49, 50, 51, 60, 69, 78],
43:[44, 45, 52, 53, 54, 61, 70, 79],
44:[45, 52, 53, 54, 62, 71, 80],
45:[52, 53, 54, 63, 72, 81],
46:[47, 48, 49, 50, 51, 52, 53, 54, 55, 64, 73],
47:[48, 49, 50, 51, 52, 53, 54, 56, 65, 74],
48:[49, 50, 51, 52, 53, 54, 57, 66, 75],
49:[50, 51, 52, 53, 54, 58, 67, 76],
50:[51, 52, 53, 54, 59, 68, 77],
51:[52, 53, 54, 60, 69, 78],
52:[53, 54, 61, 70, 79],
53:[54, 62, 71, 80],
54:[63, 72, 81],
55:[56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 73, 74, 75],
56:[57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 73, 74, 75],
57:[58, 59, 60, 61, 62, 63, 64, 65, 66, 73, 74, 75],
58:[59, 60, 61, 62, 63, 67, 68, 69, 76, 77, 78],
59:[60, 61, 62, 63, 67, 68, 69, 76, 77, 78],
60:[61, 62, 63, 67, 68, 69, 76, 77, 78],
61:[62, 63, 70, 71, 72, 79, 80, 81],
62:[63, 70, 71, 72, 79, 80, 81],
63:[70, 71, 72, 79, 80, 81],
64:[65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75],
65:[66, 67, 68, 69, 70, 71, 72, 73, 74, 75],
66:[67, 68, 69, 70, 71, 72, 73, 74, 75],
67:[68, 69, 70, 71, 72, 76, 77, 78],
68:[69, 70, 71, 72, 76, 77, 78],
69:[70, 71, 72, 76, 77, 78],
70:[71, 72, 79, 80, 81],
71:[72, 79, 80, 81],
72:[79, 80, 81],
73:[74, 75, 76, 77, 78, 79, 80, 81],
74:[75, 76, 77, 78, 79, 80, 81],
75:[76, 77, 78, 79, 80, 81],
76:[77, 78, 79, 80, 81],
77:[78, 79, 80, 81],
78:[79, 80, 81],
79:[80, 81],
80:[81],
})


# This section is to demonstrate a proper n^2-coloring of the graph, 
# given a proper (partial) coloring of the vertices corresponding to the top row of the board.
# This is achieved by partitioning the vertices into specific (independent) sets.
# Once partitioned, subgraphs are induced on these vertices,
# and we verify that these induced subgraphs contain no edges (and hence are independent sets),
# that each set has exactly n^2 vertices,
# and that there are exactly n^2 such independent sets.
# The results are saved to a file named “s3propcol.txt”.
# Note that this requires the canonical labeling of the vertices.


n = 3
i = range(1, n^2 + 1)
V = list(cartesian_product([i,i]))
P = [[(1,j)] for j in range(1,n^2+1)]

def f(x):
	if x[0] == 1:
		for m in range(len(P)):
			if x[1] == P[m][0][1]:
				P[m].append(u)
	if 1 < x[0] <= n:
		v = []
		v.append(x[0] - 1)
		v.append((x[1] + n)%(n^2))
		if v[1] == 0:
			v[1] = v[1] + n^2
		f(v)
	if x[0] > n:
		z = []
		z.append(x[0] - n)
		if x[1]%n == 0:
			z.append(x[1] + 1 - n)
		else:
			z.append(x[1] + 1)
		f(z)

for k in range(n^2, len(V)):
	u = V[k]
	f(u)

o=open('./s3propcol.txt','w')
X = list(range(1,n^2+1))
for t in range(len(P)):
        X[t]=S3.subgraph(P[t],algorithm="add")
        o.write(str('Subgraph '))
        o.write(str(t+1))
        o.write(str(' is on vertices '))
        o.write(str(X[t].vertices()))
        o.write(str('\n'))
        o.write(str('This subgraph has '))
        o.write(str(X[t].order()))
        o.write(str(' vertices and '))
        o.write(str((X[t].size())))
        o.write(str(' edges.'))
        o.write(str('\n'))
o.close


#######
# Our results for this are pasted below:

Subgraph 1 is on vertices [(1, 1), (2, 7), (3, 4), (4, 3), (5, 9), (6, 6), (7, 2), (8, 8), (9, 5)]
This subgraph has 9 vertices and 0 edges.
Subgraph 2 is on vertices [(1, 2), (2, 8), (3, 5), (4, 1), (5, 7), (6, 4), (7, 3), (8, 9), (9, 6)]
This subgraph has 9 vertices and 0 edges.
Subgraph 3 is on vertices [(1, 3), (2, 9), (3, 6), (4, 2), (5, 8), (6, 5), (7, 1), (8, 7), (9, 4)]
This subgraph has 9 vertices and 0 edges.
Subgraph 4 is on vertices [(1, 4), (2, 1), (3, 7), (4, 6), (5, 3), (6, 9), (7, 5), (8, 2), (9, 8)]
This subgraph has 9 vertices and 0 edges.
Subgraph 5 is on vertices [(1, 5), (2, 2), (3, 8), (4, 4), (5, 1), (6, 7), (7, 6), (8, 3), (9, 9)]
This subgraph has 9 vertices and 0 edges.
Subgraph 6 is on vertices [(1, 6), (2, 3), (3, 9), (4, 5), (5, 2), (6, 8), (7, 4), (8, 1), (9, 7)]
This subgraph has 9 vertices and 0 edges.
Subgraph 7 is on vertices [(1, 7), (2, 4), (3, 1), (4, 9), (5, 6), (6, 3), (7, 8), (8, 5), (9, 2)]
This subgraph has 9 vertices and 0 edges.
Subgraph 8 is on vertices [(1, 8), (2, 5), (3, 2), (4, 7), (5, 4), (6, 1), (7, 9), (8, 6), (9, 3)]
This subgraph has 9 vertices and 0 edges.
Subgraph 9 is on vertices [(1, 9), (2, 6), (3, 3), (4, 8), (5, 5), (6, 2), (7, 7), (8, 4), (9, 1)]
This subgraph has 9 vertices and 0 edges.

#######

#######

#######

#######

# This section generates a .png file of an embedding of the graph in a file named “s3visual.png”.

o=open('./s3visual.png','w')
o=S3.plot(layout='circular',vertex_labels=False,vertex_size=50,vertex_colors=(1,1,1))
o.save('s3visual.png')
o.close

#######

#######

# This section tests various properties of the graph and outputs the results in a file named “s3info.txt”. 
# Be warned that some of these processes are computationally expensive, especially for n > 3
# (particularly .is_circulant)

n=3
q=3*n^2-2*n-1
a=S3.size()
b=S3.is_regular(q)
c=S3.clique_number()
d=S3.independent_set(value_only=True)
e=S3.is_planar()
f=S3.is_strongly_regular()
g=S3.chromatic_number()
h=S3.is_cayley()
i=S3.is_vertex_transitive()
j=S3.is_edge_transitive()
k=S3.is_hamiltonian()
l=S3.vertex_connectivity()
p=S3.is_circulant()
r=S3.automorphism_group()

o=open('./s3info.txt','w')
o.write(str('The number of edges in S3 is '))
o.write(str(a))
o.write(str('\n'))
o.write(str('It is '))
o.write(str(b))
o.write(str(' that S3 is '))
o.write(str(q))
o.write(str('-regular'))
o.write(str('\n'))
o.write(str('The clique number is '))
o.write(str(c))
o.write(str('\n'))
o.write(str('The independence number is '))
o.write(str(d))
o.write(str('\n'))
o.write(str('It is '))
o.write(str(e))
o.write(str(' that S3 is planar'))
o.write(str('\n'))
o.write(str('It is '))
o.write(str(f))
o.write(str(' that S3 is strongly regular'))
o.write(str('\n'))
o.write(str('The chromatic number is '))
o.write(str(g))
o.write(str('\n'))
o.write(str('It is '))
o.write(str(h))
o.write(str(' that S3 is a Cayley graph for some group'))
o.write(str('\n'))
o.write(str('It is '))
o.write(str(i))
o.write(str(' that S3 is vertex transitive'))
o.write(str('\n'))
o.write(str('It is '))
o.write(str(j))
o.write(str(' that S3 is edge transitive'))
o.write(str('\n'))
o.write(str('It is '))
o.write(str(k))
o.write(str(' that S3 is hamiltonian'))
o.write(str('\n'))
o.write(str('The vertex connectivity is '))
o.write(str(l))
o.write(str('\n'))
o.write(str('It is '))
o.write(str(p))
o.write(str(' that S3 is a circulant graph.'))
o.write(str('\n'))
o.write(str('S3 has automorphism group order '))
o.write(str(r.order()))
o.write(str('\n'))
o.write(str('This has factorization '))
o.write(str(factor(r.order())))
o.close

#######
# Our results for this are pasted below:
####

The number of edges in S3 is 810
It is True that S3 is 20-regular
The clique number is 9
The independence number is 9
It is False that S3 is planar
It is False that S3 is strongly regular
The chromatic number is 9
It is True that S3 is a Cayley graph for some group
It is True that S3 is vertex transitive
It is False that S3 is edge transitive
It is True that S3 is hamiltonian
The vertex connectivity is 20
It is False that S3 is a circulant graph.
S3 has automorphism group order 3359232
This has factorization 2^9 * 3^8

#######