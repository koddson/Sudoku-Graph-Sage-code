{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww24060\viewh12640\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 # General code for working with S2.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 # This section is to generate the adjacencies for S2, outputted in a file named \'93s2adj.txt\'94. \
# Our vertex names (and adjacencies) are based on labeling the sudoku board; the top row is filled in, left to right, with 1, 2, \'85, n^2, in order. \
# The next row receives n^2+1, n^2+2, \'85, 2n^2; the bottom right cell of the board receives n^4.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\fs22 \cf0 \CocoaLigature0 o=open('./s2adj.txt','w')\
n = 2\
i = range(1, n^2 + 1)\
V = list(cartesian_product([i,i]))\
for k in range(len(V) - 1):\
        u = list(V[k])\
        X = []\
        for m in range(k + 1, len(V)):\
                v = list(V[m])\
                if u[0] == v[0] or u[1] == v[1] or ceil(u[0]/n) == ceil(v[0]/n) and ceil(u[1]/n) == ceil(v[1]/n):\
                        X.append((v[0] - 1)*n^2 + v[1])\
        f = (u[0] - 1)*n^2 + u[1]\
        o.write(str(f))\
        o.write(str(':'))\
        o.write(str(X))\
        o.write(str('\\n'))\
o.close\
\
# Open the file \'93s2adj.txt\'94 and prepend the results with the following line >>\
\
# S2=Graph(\{\
\
# <<\
# Append the results with the following line >>\
\
# \})\
\
# <<\
# Copy and past the contents of this file to your working S2 file. We have done so below:\
\
S2=Graph(\{\
1:[2, 3, 4, 5, 6, 9, 13],\
2:[3, 4, 5, 6, 10, 14],\
3:[4, 7, 8, 11, 15],\
4:[7, 8, 12, 16],\
5:[6, 7, 8, 9, 13],\
6:[7, 8, 10, 14],\
7:[8, 11, 15],\
8:[12, 16],\
9:[10, 11, 12, 13, 14],\
10:[11, 12, 13, 14],\
11:[12, 15, 16],\
12:[15, 16],\
13:[14, 15, 16],\
14:[15, 16],\
15:[16]\
\})\
\
#######\
#######\
#######\
# This section is to complete a proper coloring of the graph, given a proper (partial) coloring of the vertices corresponding to the top row of the board.\
#######\
#######\
#######\
\
#######\
#######\
#######\
# This section constructs the graph (K_\{n^2\} (cartesian graph product) K_\{n^2\}) U (n K_n (strong graph product) n K_n), \
# where K_\{n^2\} is the complete graph on n^2 vertices,\
# n K_n is n disjoint copies of the complete graph on n vertices,\
# where the two products have the same vertex set,\
# and the union of the products is the union of their edge sets.\
# We then test this graph for isomorphism against the sudoku graph.\
#######\
#######\
#######\
\
#######\
#######\
#######\
# This section generates the direct product group Z_n x Z_n x Z_n x Z_n, forms a particular Cayley graph for the group, \
# and checks this Cayley graph for isomorphism against the sudoku graph.\
#######\
#######\
#######\
\
# This section generates a .png file of an embedding of the graph in a file named \'93s2visual.png\'94.\
\
o=open('./s2visual.png','w')\
o=S2.plot(layout='circular',vertex_labels=False,vertex_size=50,vertex_colors=(1,1,1))\
o.save('s2visual.png')\
o.close(\'92s2visual.png\'92)\
\
#######\
#######\
#######\
# This section generates an induced subgraph of Sm, 2 <= m <= n.\
#######\
#######\
#######\
\
# This section tests various properties of the graph and outputs the results in a file named \'93s2info.txt\'94. \
# Be warned that some of these processes are computationally expensive, especially for larger Sn.\
\
q=3*2^2-2*2-1\
a=S2.size()\
b=S2.is_regular(q)\
c=S2.clique_number()\
d=S2.independent_set(value_only=True)\
e=S2.is_planar()\
f=S2.is_strongly_regular()\
g=S2.chromatic_number()\
h=S2.is_cayley()\
i=S2.is_vertex_transitive()\
j=S2.is_edge_transitive()\
k=S2.is_hamiltonian()\
l=S2.vertex_connectivity()\
p=S2.is_circulant()\
\
o=open('./s2info.txt','w')\
o.write(str(\'91The number of edges in S2 is \'92))\
o.write(str(a))\
o.write(str(\'91\\n\'92))\
o.write(str(\'91It is \'91))\
o.write(str(b))\
o.write(str(\'91 that S2 is \'91))\
o.write(str(q))\
o.write(str(\'91-regular\'92))\
o.write(str(\'91\\n\'92))\
o.write(str(\'91The clique number is \'91))\
o.write(str(c))\
o.write(str(\'91\\n\'92))\
o.write(str(\'91The independence number is \'91))\
o.write(str(d))\
o.write(str(\'91\\n\'92))\
o.write(str(\'91It is \'91))\
o.write(str(e))\
o.write(str(\'91 that S2 is planar\'92))\
o.write(str(\'91\\n\'92))\
o.write(str(\'91It is \'91))\
o.write(str(f))\
o.write(str(\'91 that S2 is strongly regular\'92))\
o.write(str(\'91\\n\'92))\
o.write(str(\'91The chromatic number is \'91))\
o.write(str(g))\
o.write(str(\'91\\n\'92))\
o.write(str(\'91It is \'91))\
o.write(str(h))\
o.write(str(\'91 that S2 is a Cayley graph for some group))\
o.write(str(\'91\\n\'92))\
o.write(str(\'91It is \'91))\
o.write(str(i))\
o.write(str(\'91 that S2 is vertex transitive))\
o.write(str(\'91\\n\'92))\
o.write(str(\'91It is \'91)\
o.write(str(j))\
o.write(str(\'91 that S2 is edge transitive))\
o.write(str(\'91\\n\'92))\
o.write(str(\'91It is \'91))\
o.write(str(k))\
o.write(str(\'91 that S2 is hamiltonian))\
o.write(str(\'91\\n\'92))\
o.write(str(\'91The vertex connectivity is \'91))\
o.write(str(l))\
o.write(str(\'91\\n\'92))\
o.write(str(\'91It is \'91))\
o.write(str(p))\
o.write(str(\'91 that S2 is a circulant graph.\'92))\
o.save(\'91s2info.txt\'92)\
o.close(\'92s2info.txt\'92)}